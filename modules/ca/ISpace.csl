/*
	Manages a collection of object graphs. Provides change tracking and notifications.

	Objects are guaranteed to be unique within a space. They can also be shared by
	multiple spaces in the same universe, and have copies in different universes.

	The space has a central role in the life-cycle of its object graphs.

	A space posts notifications at various points. For instance, when changes are
	detected for an object (or a branch of the object graph), when.

	A note about reference counting: a space never keeps strong references to
	its observers; therefore, observers must be removed from a space before they
	become invalid. It's good practice for an observer to always handle its own
	addition to/removal from a space, as this allows the observer's destructor
	to unregister itself if necessary.
 */
interface ISpace extends ISpaceObserver
{
	//---------- Object Management ----------//

	/*
		Adds a root object to the space.

		This operation implicitly adds to the space the whole graph of objects
		reachable from \a root, in accordance with the object model (IModel) in effect.

		\throw ModelException if \a root's component is not in the object model.
	 */
	void addRootObject( in co.IObject root ) raises ModelException;

	/*
		Removes a root object from the space.

		This operation implicitly removes from the space all objects that are
		no longer reachable after removing the \a root object.

		\throw NoSuchObjectException if \a root is not in the list of root objects.
	 */
	void removeRootObject( in co.IObject root ) raises NoSuchObjectException;

	/*
		Returns the list of root objects in the space.
	 */
	void getRootObjects( out co.IObject[] roots );

	//---------- Change Tracking ----------//

	/*
		Marks a \a service as having been changed.
		The service will be checked for changes in the next call to notifyChanges().

		\throw NoSuchObjectException if the object that provides \a service is not in this space.
		\throw ModelException if the \a service's facet is not in the object model.
	 */
	void addChange( in co.IService service ) raises NoSuchObjectException, ModelException;

	/*
		Gathers a list of changes and posts all change notifications.

		Changes are detected by examining all services marked as changed (e.g.
		by using addChange()) since the last call to notifyChanges().
	 */
	void notifyChanges();

	//---------- Change Notifications ----------//

	/*
		Adds an \a observer to be notified of all changes to this space's object graph.
		\throw co.IllegalArgumentException if \a observer is invalid.
	 */
	void addSpaceObserver( in ISpaceObserver observer ) raises co.IllegalArgumentException;

	/*
		Removes \a observer from the list of space observers.
		\throw co.IllegalArgumentException if \a observer is not in the list of space observers.
	 */
	void removeSpaceObserver( in ISpaceObserver observer ) raises co.IllegalArgumentException;
};
