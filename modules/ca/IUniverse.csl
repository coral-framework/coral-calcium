/*
	A unified context for objects under the same model.

	\warning IUniverse is restricted and should not be used
		directly. Use an ISpace instead.
 */
interface IUniverse
{
	//---------- Space Registration and Management ----------//

	/*
		Adds a space to this universe.
	 */
	uint16 registerSpace( in ISpace space );

	/*
		Removes a space from this universe.
	 */
	void unregisterSpace( in uint16 spaceId );

	/*
		Adds a root object to a space.
		\throw ModelException if \a root's component is not in the object model.
	 */
	void addRootObject( in uint16 spaceId, in co.IObject root ) raises ModelException;

	/*
		Removes a root object from a space.
		\throw NoSuchObjectException if \a root is not in the space's list of root objects.
	 */
	void removeRootObject( in uint16 spaceId, in co.IObject root ) raises NoSuchObjectException;

	/*
		Returns the list of root objects in a space.
	 */
	void getRootObjects( in uint16 spaceId, out co.IObject[] roots );

	//---------- Change Sections and Notifications ----------//

	/*
		Starts a change section.

		The argument must be a \a service whose type is in the object model,
		and whose provider object is in the specified space within this universe.

		\return The nesting level of the current change section.

		\throw NoSuchObjectException if the object that provides the \a service is not in this universe.
		\throw ModelException if the \a service's facet/component is not defined in the object model.
	 */
	uint32 beginChange( in uint16 spaceId, in co.IService service ) raises NoSuchObjectException;

	/*
		Ends all change sections up to (and including) the specified \a level.
		A \a level of zero ends all active change sections.

		\note All calls to beginChange() should be paired with a call to endChange().
			A warning is generated whenever 2+ sections are finished by a single call
			to endChange().

		\throw co.IllegalArgumentException if \a level is deeper than the current stack.
	 */
	void endChange( in uint16 spaceId, in uint32 level );

	/*
		Notifies all spaces of the changes detected since the last call to this method.

		Changes are detected by calls to endChange() and accumulated in the same
		changesets (ISpaceChanges) until this method posts and resets all changesets.

		Automatically called at the end of a level-zero endChange() call.
	 */
	void notifyChanges();
};
